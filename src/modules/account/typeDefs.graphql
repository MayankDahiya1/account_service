# Rate limiting directive
directive @rateLimit(
  limit: Int!
  duration: Int!
  message: String
) on FIELD_DEFINITION

# Authorization directive for account types
directive @accountAuth(accountType: String) on FIELD_DEFINITION

# Types

type Account {
  id: String
  email: String
  name: String
  role: String
  createdAt: String
  updatedAt: String
  password: String
  message: String
  status: String
}

# Login response type
type LoginResponse {
  refreshToken: String
  accessToken: String
  status: String
  message: String
  Account: Account
}

type AuthPayload {
  accessToken: String
  refreshToken: String
  status: String
  message: String
}

# Root Query
type Query {
  # Get all accounts (with search and pagination)
  AccountGetAll(limit: Int, search: String): [Account!]!
    @accountAuth(accountType: "ADMIN")
    @rateLimit(limit: 5, duration: 60)

  # Get own account by ID
  AccountGetById(id: ID!): Account
    @accountAuth(accountType: "USER")
    @rateLimit(limit: 3, duration: 30)
}

# Root Mutation

type Mutation {
  # Create new account
  AccountCreate(email: String!, password: String!, name: String!): Account!
    @rateLimit(
      limit: 2
      duration: 3600
      message: "Too many login attempts. Try again later."
    )

  # Login user and return JWT token
  AccountLogin(email: String!, password: String!): LoginResponse!
    @rateLimit(
      limit: 5
      duration: 60
      message: "Too many login attempts. Try again later."
    )

  # Token generation
  AccountTokenGenerate(refreshToken: String!): AuthPayload!
    @accountAuth
    @rateLimit(
      limit: 5
      duration: 60
      message: "Too many login attempts. Try again later."
    )

  # Account delte
  AccountDelete: Account
    @accountAuth
    @rateLimit(
      limit: 5
      duration: 60
      message: "Too many login attempts. Try again later."
    )
}
